>> A brief description of the overall design of the application system. 
>> The description should focus mostly on the classes required to deliver
>  the major functions of your application, not on secondary or utility classes
>> We shall clearly describe the responsibilty and interface of each class and 
>  the relationships among them


Our application design uses a main menu, command line interface to access the other required
aspects of the project. The main menu guides the user to their desired entry point through a 
number of print statements. Each aspect of the application design calls another python file 
which all only use sets of functions.

Responsibility and Interface of each file;
For new vehicle registration, the goal is to register a vehicle. This program asks the user to enter a sin then
prompts them to register the person if their sin has not been registered before. After this
the user must register a vehicle, along the being sure to only register people for cars exisitng in tge database.

For violation record, the goal is to save the violation record to database.  This violation component records all details of the ticket table, being sure to only accept entries for valid people.

For licence registration, the goal is to register a driver licence.
The program begins by SIN input.
Since SIN is unqiue, the program will use that to check whether there is a driver licence registered with the specified SIN.
If there exists a driver licence, the program prints an error message for any attempt to edit the registered driver licence.
Otherwise, the program checks whether the person is in the database by SIN.
If the person is not in database, the program will add a new person and continue with driver licence registration.
If the person is in database, the program will just add a driver licence to the existing person's record.

For auto transaction, the goal is to allows an officer to enter infomaion with respect to the details of
seller, buyer, date, and price to complete the transaction.
First, the program prompts for buyer ID and check whether the buyer exist in the database.
If not found, the program gets buyer information and adds a new person to the database.
Second, the program gets vehicle ID and seller ID and check whether the vehicle exists in database.
If it exists, program continues. Otherwise, the program adds vehicle record in order to continue.
Once vehicle ID is confirmed, the program match seller ID with the owner(s) of the vehicle.
If the seller is not an owner, the program prints an error message.
Otherwise, seller is confirmed as an owner, the office can continue to enter the rest of the information accordingly to the program's 
prompt inputs.
